//zscript.zsc
version "4.7"

//yea

class BoxPartyDoomHUD : BaseStatusBar
{
	HUDFont NumberFont; //used for all the number stuff on the HUD.
	HUDFont SmallFont; //default smallfont font for anything else.
	HUDFont SBoxFont; //box party font
	HUDFont CurrentFont; //current font chosen by user
	cvar fontcvar, mugcvar, armoriconcvar, ammoiconcvar, showarmorcvar;
	InventoryBarState invbar;
	
	//stuff
	bool HasAmmo1;
	bool HasAmmo2;
	const ArmorMax = 100;
	
	//score
	double ScoreFadeTime;
	double ComboFade;
	int PrevScore;
	bool ScoreRespawn;

	//the interpolators interpolate the numbers.
	DynamicValueInterpolator BoxHealthInterpolator;
	DynamicValueInterpolator BoxArmorInterpolator;
	DynamicValueInterpolator BoxAmmoInterpolator;
	DynamicValueInterpolator BoxAmmo2Interpolator;
	DynamicValueInterpolator BoxScoreInterpolator;
	
	//water stuff
	bool IsUnderwater; //bruh
	int OxygenLevel; //how much oxygen u got
	int MaxOxygen; //maximum oxygen
	int OxygenNumber; //number displayed on HUD
	int OxygenColor;
	const AirAmount = 20; //i dont see any reason why someone would change how many seconds u can breathe underwater, but whatever
	
	//screen shake
	vector2 CustomOffset; //offset for modded stuff
	vector2 ShakeOffset; //offset for hud shake
	vector2 GlobalOffset; //offset of all hud elements
	int OffsetHealth; //used to calculate hud shake effect
	cvar shakecvar; //used to control hud shake effect
	
	//more offset
	vector2 ArmorOffset; //move hud elements up if armor is active
	vector2 Ammo1Offset; //move hud elements up if ammo1 is active
	vector2 Ammo2Offset;
	vector2 PrismOffset; //move hp bar so that larger hp bar will show up right
	
	bool HideAmmo1;
	
	int leveltime;

	override void Init()
	{
		Super.Init();
		SetSize(0, 320, 240);
		
		//smallbox is used for health/ammo bar numbers, smallfont is for everything else
		SBoxFont = HUDFont.Create("SBoxFont");
		SmallFont = HUDFont.Create("SmallFont");
		fontcvar = cvar.findcvar("box_hudfont");
		if (fontcvar.GetBool() == true)	{CurrentFont = SBoxFont;} else {CurrentFont = SmallFont;}
		NumberFont = HUDFont.Create("SMALLBOX");
		
		//set max air capacity
		MaxOxygen = AirAmount * 35;
		
		BoxHealthInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 8);
		BoxArmorInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 50);
		BoxAmmoInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 50);
		BoxAmmo2Interpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 50);
		BoxScoreInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 9999999);
		
		invbar = InventoryBarState.Create();
		
		shakecvar = cvar.findcvar("box_hudshake");
		mugcvar = cvar.findcvar("box_mugshot");
		armoriconcvar = cvar.findcvar("box_armoricon");
		ammoiconcvar = cvar.findcvar("box_ammoicon");
		showarmorcvar = cvar.findcvar("box_alwaysarmor");
	}

	override void NewGame()
	{
		Super.NewGame();

		//reset numbers back to 0 on new game
		BoxHealthInterpolator.Reset(0);
		BoxArmorInterpolator.Reset(0);
		BoxAmmoInterpolator.Reset(0);
		BoxAmmo2Interpolator.Reset(0);
		BoxScoreInterpolator.Reset(0);
		
		ScoreFadeTime = 2.75;
	}
	
	override void Tick()
	{
		Super.Tick();
		
		//update interpolated numbers
		BoxInterpolate();
		
		leveltime = level.maptime / 35;
		
		Ammo ammo1, ammo2;
		int ammomax;
		int ammocount1, ammocount2;
		[ammo1, ammo2, ammocount1, ammocount2] = GetCurrentAmmo();
		if (BoxAmmoInterpolator.GetValue() > ammocount1) {BoxAmmoInterpolator.Reset(ammocount1);} else {BoxAmmoInterpolator.Update(ammocount1);}
		if (BoxAmmo2Interpolator.GetValue() > ammocount2) {BoxAmmo2Interpolator.Reset(ammocount2);} else {BoxAmmo2Interpolator.Update(ammocount2);}
		
		//screen shake effect
		int OffsetAmount = 0;
		if (cplayer.health > 0) //only shake if alive
		{
			if (!OffsetHealth > 0) {OffsetHealth = cplayer.health;} //offsethealth should never reach 0 after start
			else if (OffsetHealth > cplayer.health) //health lowered, start shaking
			{
				if (OffsetHealth > 200 + cplayer.health) {OffsetHealth = 200 + cplayer.health;}
				if (BoxArmorInterpolator.GetValue() > 0) {OffsetAmount = (((OffsetHealth - cplayer.health) * (shakecvar.GetInt())) / 8);} //shakes 1 pixel per 4 damage for triangle
				else {OffsetAmount = (((OffsetHealth - cplayer.health) * (shakecvar.GetInt())) / 20);} //shakes 1 pixel per 10 damage for non-triangles
				if (OffsetAmount > (4 + shakecvar.GetInt())) {OffsetAmount = (4 + shakecvar.GetInt());} //cap shake amount
				ShakeOffset = (randompick[boxhud](-OffsetAmount, OffsetAmount), randompick[boxhud](-OffsetAmount, OffsetAmount));
				OffsetHealth += -1;
			}
			else //health raised/stagnated, stop shaking
			{
				OffsetHealth = cplayer.health;
				ShakeOffset = (0, 0);
			}
		}
		else {ShakeOffset = (0, 0);} //reset position if dead
		
		//update oxygenlevel
		if ((cplayer.mo.waterlevel == 3) && !(cplayer.cheats & CF_GODMODE) && !(cplayer.cheats & CF_GODMODE2))
		{
			if (IsUnderwater == true) {OxygenLevel += -1;}
			if (IsUnderwater == false)
			{
				OxygenLevel = MaxOxygen;
				IsUnderwater = true;
			}
			OxygenNumber = OxygenLevel / 7;
			if (OxygenNumber <= 25) {OxygenColor = Font.CR_DARKRED;} else {OxygenColor = Font.CR_DARKGRAY;}
		}
		else {IsUnderwater = false;}
		
		//update score
		if (ScoreRespawn == true)
		{
			if (ScoreFadeTime > 0.0) {ScoreFadeTime += -0.01;}
			if (CPlayer.mo.score > PrevScore) {ScoreFadeTime = 2.75;}
		}
		PrevScore = CPlayer.mo.score;
		
		shakecvar = cvar.findcvar("box_hudshake");
		fontcvar = cvar.findcvar("box_hudfont");
		if (fontcvar.GetBool() == true)	{CurrentFont = SBoxFont;} else {CurrentFont = SmallFont;}
		
		ScoreRespawn = true;
		GlobalOffset = ShakeOffset + CustomOffset;
	}
	
	override void Draw(int state, double TicFrac)
	{
		Super.Draw(state, TicFrac);
		
		if (state == HUD_Fullscreen) //render HUD in fullscreen mode
		{
			BeginHUD();
			DrawBoxHUD(TicFrac);
		}
	}
	
	override void DrawAutomapHUD(double TicFrac)
	{
		Super.DrawAutomapHUD(TicFrac);
		
		BeginHUD(0.5);
		DrawBoxHUD(TicFrac);
	}
	
	void DrawBoxHUD(double TicFrac)
	{
		DrawBar("graphics/boxhud/HUDBARB.png", "graphics/boxhud/HUDBARA.png", BoxHealthInterpolator.GetValue(), cplayer.mo.GetMaxHealth(true), GlobalOffset + PrismOffset + (-168, -32), 0, SHADER_REVERSE, DI_ITEM_OFFSETS);
		if (BoxHealthInterpolator.GetValue() > cplayer.mo.GetMaxHealth(true))
		{
			DrawBar("graphics/boxhud/HUDBARC.png", "graphics/boxhud/HUDBARB.png", BoxHealthInterpolator.GetValue() - cplayer.mo.GetMaxHealth(true), cplayer.mo.GetMaxHealth(true), GlobalOffset + PrismOffset + (-168, -32), 0, SHADER_REVERSE, DI_ITEM_OFFSETS);
		}
		DrawString(NumberFont, FormatNumber(cplayer.health, 0), GlobalOffset + (-48, -24), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_RIGHT, Font.CR_BLACK);
		
		switch (mugcvar.GetInt())
		{
			default: DrawTexture(GetMugShot(5), GlobalOffset + (-36, -36), DI_ITEM_OFFSETS); break;
			case 1: DrawTexture(GetMugShot(1, MugShot.DISABLEOUCH|MugShot.DISABLERAMPAGE|MugShot.CUSTOM, "FAC"), GlobalOffset + (-32, -32), DI_ITEM_OFFSETS); break;
			case 2: DrawTexture(GetMugShot(1, MugShot.DISABLEOUCH|MugShot.DISABLERAMPAGE|MugShot.CUSTOM, "CAC"), GlobalOffset + (-32, -32), DI_ITEM_OFFSETS); break;
			case 3: DrawTexture(GetMugShot(1, MugShot.DISABLEOUCH|MugShot.DISABLERAMPAGE|MugShot.CUSTOM, "TAC"), GlobalOffset + (-32, -32), DI_ITEM_OFFSETS); break;
		}
		
		if ((GetArmorAmount() > 0) || (showarmorcvar.GetBool() == true)) //show armor when not empty
		{
			DrawBar("graphics/boxhud/HUDBARH.png", "graphics/boxhud/HUDBARG.png", BoxArmorInterpolator.GetValue(), ArmorMax, GlobalOffset + (-142, -56), 0, SHADER_REVERSE, DI_ITEM_OFFSETS);
			if (BoxArmorInterpolator.GetValue() > ArmorMax)
			{
				DrawBar("graphics/boxhud/HUDBARK.png", "graphics/boxhud/HUDBARH.png", BoxArmorInterpolator.GetValue() - ArmorMax, ArmorMax, GlobalOffset + (-142, -56), 0, SHADER_REVERSE, DI_ITEM_OFFSETS);
			}
			DrawString(NumberFont, FormatNumber(GetArmorAmount(), 0), GlobalOffset + (-48, -50), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_RIGHT, Font.CR_GREEN);
			if (armoriconcvar.GetBool() == false)
			{
				if (GetArmorAmount() > 100)
				{
					DrawImage("ARM2B0", GlobalOffset + (-22, -38), DI_ITEM_OFFSETS);
				}
				else if (GetArmorAmount() > 25)
				{
					DrawImage("ARM1B0", GlobalOffset + (-22, -38), DI_ITEM_OFFSETS);
				}
				else if (GetArmorAmount() > 0)
				{
					DrawImage("BON2A0", GlobalOffset + (-22, -38), DI_ITEM_OFFSETS);
				}
			}
			else
			{
				DrawImage("graphics/boxhud/ARMORICON.png", GlobalOffset + (-24, -36), DI_ITEM_OFFSETS);
			}
		}
		
		//AMMO BARS
		Ammo ammo1, ammo2;
		int ammo1max, ammo2max, ammocount1, ammocount2;
		[ammo1, ammo2, ammocount1, ammocount2] = GetCurrentAmmo();
		textureid ammo1icon, ammo2icon;
		
		if ((GetArmorAmount() > 0) || (showarmorcvar.GetBool() == true)) {ArmorOffset = (0, -24);} //do armor offset if armor > 0
		else {ArmorOffset = (0, 0);}
		Ammo1Offset = (0, -20 * HasAmmo1);
		Ammo2Offset = (0, -20 * HasAmmo2);
		
		bool noammo1, noammo2;
		if (ammocount1 == 0) {noammo1 = true;} else {noammo1 = false;}
		if (ammocount2 == 0) {noammo2 = true;} else {noammo2 = false;}
		
		if ((ammo1 != null) && (HideAmmo1 != true))
		{
			ammo1max = CPlayer.ReadyWeapon.Ammo1.MaxAmount;
			ammo1icon = GetIcon(cplayer.readyweapon.ammo1, 0);
			DrawBar("graphics/boxhud/HUDBARF.png", "graphics/boxhud/HUDBARE.png", BoxAmmoInterpolator.GetValue(), ammo1max, GlobalOffset + ArmorOffset + (-136, -52), 0, SHADER_REVERSE, DI_ITEM_OFFSETS);
			DrawString(NumberFont, FormatNumber(ammocount1, 1), GlobalOffset + ArmorOffset + (-48, -49), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_RIGHT, Font.CR_BLACK);
			if (ammoiconcvar.GetBool() == true)
			{
				DrawImage("graphics/boxhud/AMMOA0.png", GlobalOffset + ArmorOffset + (-32, -52), DI_ITEM_OFFSETS);
			}
			else
			{
				DrawTexture(ammo1icon, GlobalOffset + ArmorOffset + (-24, -36), DI_ITEM_OFFSETS);
			}
			HasAmmo1 = true;
		}
		else {HasAmmo1 = false;}
		if (ammo2 != null)
		{
			ammo2max = cplayer.readyweapon.ammo2.maxamount;
			ammo2icon = GetIcon(cplayer.readyweapon.ammo2, 0);
			DrawBar("graphics/boxhud/HUDBARF.png", "graphics/boxhud/HUDBARE.png", BoxAmmo2Interpolator.GetValue(), ammo2max, GlobalOffset + ArmorOffset + Ammo1Offset + (-136, -52), 0, SHADER_REVERSE, DI_ITEM_OFFSETS);
			DrawString(NumberFont, FormatNumber(ammocount2, 1), GlobalOffset + ArmorOffset + Ammo1Offset + (-48, -49), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_RIGHT, Font.CR_BLACK);
			if (ammoiconcvar.GetBool() == true)
			{
				DrawImage("graphics/boxhud/AMMOB0.png", GlobalOffset + ArmorOffset + Ammo1Offset + (-32, -52), DI_ITEM_OFFSETS);
			}
			else
			{
				DrawTexture(ammo2icon, GlobalOffset + ArmorOffset + Ammo1Offset + (-24, -36), DI_ITEM_OFFSETS);
			}
			HasAmmo2 = true;
		}
		else {HasAmmo2 = false;}
		
		//KEYS
		Vector2 keypos = (10, -2);
		for(let i = CPlayer.mo.Inv; i != null; i = i.Inv)
		{
			if (i is "Key" && i.Icon.IsValid())
			{
				DrawTexture(i.Icon, keypos, DI_SCREEN_LEFT_BOTTOM|DI_ITEM_RIGHT_BOTTOM);
				Vector2 size = TexMan.GetScaledSize(i.Icon);
				keypos.X += size.X + 2;
			}
		}
		
		//level time
		vector2 TimeOffset = (0, 20);
		cvar timecvar = cvar.FindCVAR('box_leveltime');
		if (timecvar.GetBool() == true)
		{
			DrawImage("graphics/boxhud/SCOREBAR.png", GlobalOffset + (-46, 28));
			let timestring = String.Format("\c-%d\cu:\c-%02d\cu.\c-%02d", (leveltime/60)%10000, leveltime%60, level.maptime%35);
			DrawString(CurrentFont, timestring, GlobalOffset + (-12, 16), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_RIGHT);
		}
		else {TimeOffset = (0, 0);}
		
		//score
		cvar togglescore = cvar.FindCVAR('box_showscore');
		double ScoreAlpha = ScoreFadeTime;
		if (togglescore.GetInt() <= 1)	{ScoreAlpha = 1.0;}
		if (togglescore.GetInt() >= 1)
		{
			DrawImage("graphics/boxhud/SCOREBAR.png", GlobalOffset + TimeOffset + (-46, 28), 0, ScoreAlpha);
			DrawString(CurrentFont, FormatNumber(BoxScoreInterpolator.GetValue()), GlobalOffset + TimeOffset + (-12, 16), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_RIGHT, Font.CR_WHITE, ScoreAlpha);
		}
	
		//oxygen meter
		if (IsUnderwater == true)
		{
			DrawBar("graphics/boxhud/HUDBARJ.png", "graphics/boxhud/HUDBARI.png", OxygenLevel, MaxOxygen, GlobalOffset + TimeOffset + (-142, 32), 0, SHADER_REVERSE, DI_ITEM_OFFSETS);
			DrawImage("graphics/boxhud/AIRICON.png", GlobalOffset + TimeOffset + (-32, 32), DI_ITEM_OFFSETS);
			DrawString(NumberFont, FormatNumber(OxygenNumber), GlobalOffset + TimeOffset + (-48, 36), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_RIGHT, OxygenColor);
		}
		
		//inventory bar
		if (CPlayer.mo.InvSel != null && !Level.NoInventoryBar && isInventoryBarVisible() == false)
		{
			DrawInventoryIcon(CPlayer.mo.InvSel, GlobalOffset + (-188, -12), DI_DIMDEPLETED);
			DrawString(CurrentFont, FormatNumber(CPlayer.mo.InvSel.Amount), GlobalOffset + (-173, -24+CurrentFont.mFont.GetHeight()), DI_TEXT_ALIGN_RIGHT, Font.CR_GOLD);
		}
		if (isInventoryBarVisible())
		{
			DrawInventoryBar(invbar, GlobalOffset + (-268, -40), 3, DI_ITEM_LEFT_TOP);
		}
	}
	
	virtual void BoxInterpolate() 
	{
		BoxHealthInterpolator.Update(CPlayer.health);
		BoxArmorInterpolator.Update(GetArmorAmount());
		BoxScoreInterpolator.Update(CPlayer.mo.score);
	}
}


